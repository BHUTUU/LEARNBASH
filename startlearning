#!/bin/bash
#uncomment the following command for debug mode
#set -x

#<---arguments-input-defined--->
args="$@"
comand="startlearning ${args}"
PWD=$(pwd)
#<<<----------colour substitution by variables---------->>>
B0="$(printf '\033[100m')" S0="$(printf '\033[30m')"
B1="$(printf '\033[101m')" S1="$(printf '\033[31m')"
B2="$(printf '\033[102m')" S2="$(printf '\033[32m')"
B3="$(printf '\033[103m')" S3="$(printf '\033[33m')"
B4="$(printf '\033[104m')" S4="$(printf '\033[34m')"
B5="$(printf '\033[105m')" S5="$(printf '\033[35m')"
B6="$(printf '\033[106m')" S6="$(printf '\033[36m')"
B7="$(printf '\033[107m')" S7="$(printf '\033[37m')"
R1="$(printf '\033[0;1m')" R0="$(printf '\033[00m')"
#<<<-----------special colours----------->>>
T="$(printf '\033[5;1;32m')"
#<<<----------DISTRO-VRIFICATION---------->>>
OS=$(uname -o)
distro=$(pwd)

if [[ ${OS^^} == *'ANDROID'* ]]; then
  if [[ ${distro} == *'com.termux'* ]]; then
    dist="TERMUX"

  elif [[ ${distro} == *'hilled.pwnterm'* ]]; then
    dist="PWN-TERM"

  else
    printf "${S2}[${S1}!${S2}]${S1} YOUR SYSTEM IS NOT COMPATIBLE FOR THIS SCRIPT!! :( I AM SO SORRY FOR THIS!!${R0}\n"
    exit 1
  fi
elif [[ ${OS^^} == *'LINUX'* ]]; then
  dist="LINUX"

else
    printf "${S2}[${S1}!${S2}]${S1} YOUR SYSTEM IS NOT COMPATIBLE FOR THIS SCRIPT!! :( I AM SO SORRY FOR THIS!!${R0}\n"
exit 1
fi

#<<<----------REQUIREMENTS---------->>>
if [[ ${OS^^} == *'ANDROID'* ]]; then
 if [[ $dist == TERMUX ]]; then

  cd /data/data/com.termux/files/usr/bin

 elif [[ $dist == PWN-TERM ]]; then

  cd /data/data/hilled.pwnterm/files/usr/bin
 fi
  PYTHON=$(find python*)
  PV=$(find pv)
  LOLCAT=$(find lolcat)
  PLAY=$(find play)

  if [[ $PYTHON != 'python'* ]]; then
    apt install python python2 -y
    apt update && apt upgrade -y
    python3 -m pip install --upgrade pip
  fi

  if [[ $PV != pv ]]; then
    pkg install pv -y
  fi

  if [[ $LOLCAT != lolcat ]]; then
    pip install lolcat
  fi

  if [[ $PLAY != play ]]; then
    pkg install sox -y
  fi


elif [[ ${OS^^} == *'LINUX'* ]]; then
    cd /usr/bin
    PYTHON=$(find python*)
    PV=$(find pv)
    LOLCAT=$(find lolcat)
    PLAY=$(find play)
    if [[ $PYTHON != python ]]; then
      sudo apt install python python2 -y
      sudo apt update && apt upgrade -y
    fi
    if [[ $PV != pv ]]; then
      apt install pv -y
    fi
    if [[ $LOLCAT != lolcat ]]; then
      sudo pip install lolcat
    fi
    if [[ $PLAY != play ]]; then
      sudo apt install sox -y
    fi
else
    printf "${S2}[${S1}!${S2}]${S1}YOUR SYSTEM IS NOT COMPATIBLE WITH THIS PROGRAM!!${R0}\n"
    exit 1
fi

cd $distro
echo
printf "${S5}REQUIREMENTS SATISFIED!!${R0}\n" | pv -qL 100
echo
#<<<----some functions---->>>
wait() {
  sleep 0.02
}
__ENTER__() {
  echo
  printf "Press enter key to continue${T}__\e[0;0;0m\n"
  read ENTER
  echo
}
__chapter1__() {
printf "${S6}LETS START OUR BASH LEARNING ;)${R0}\n"
echo

echo -e "      ${B4} ${S2}CHAPTER:- 1 ${R0} ${R1}"
echo
echo -e "
Bash is an acronym of “Bourne-Again Shell”. It is a
default command-line interpreter for UNIX and Linux
based operating systems. In UNIX and Linux based operating
systems, a terminal window is consist of a shell and Bash.
" | pv -qL 1000 | lolcat
play assets/chapter_1/ch_1pr_1.mp3 > /dev/null 2>&1
__ENTER__
echo -e "
first of all we will learn basic commands! so lets go...
" | pv -qL 1000 | lolcat
echo -e "
First command is 'echo' or 'printf'

We use any of these to command to print anything on the screen.
examples:-

" | pv -qL 1000 | lolcat
echo '#1) echo "hello world"' | pv -qL 1000 | lolcat

echo -e "
result==> hello world
" | pv -qL 1000 | lolcat
echo '#2) printf "hello world\n"' | pv -qL 1000 | lolcat

echo -e "
result==> hello world
" | pv -qL 1000 | lolcat
echo '#note in printf we used (\n) to go to next line so that other next objects must be printed on next line! but in echo we do not need to do so.' | pv -qL 1000 | lolcat
play assets/chapter_1/ch_1pr_2.mp3 > /dev/null 2>&1
__ENTER__

echo -e "
if you want to make a script for printing your desired thing, then lets have an example for that!! ;)

  first of all you have to open any text editor for example :- 'nano', 'vim', 'neovim', etc.

  since you are a beginer then you must try with nano;
  choose a name for your script (say, test1)

then open nano by 'nano test1'

  here you have to define the language which you are going to write (here its 'bash')

  in first line have to write '#!/bin/bash'

  you may noticing '#!' that what is this?!!

  => '#!' is called shebang. In computing, a shebang is the character sequence consisting of the characters number sign and exclamation mark at the beginning of a script. It is also called sha-bang, hashbang, pound-bang, or hash-pling.
" | pv -qL 1000 | lolcat
play assets/chapter_1/ch_1pr_3.mp3 > /dev/null 2>&1
__ENTER__
echo -e "
After this from second line you can write your codes ;)

example:-
#!/bin/bash
echo \"hello world\"
echo  #<- this blank echo is used to make one line gap!" | pv -qL 1000 | lolcat
echo 'printf "hello world\n"' | pv -qL 1000 | lolcat
echo -e "

#After writing all your codes you need to save then!
command to save :- CTRL + X
 then it will ask you if you want to save or not, just press y and then Enter key!

NOW, in order to run it you have to give it execution permission by:- chmod +x test1

of your script name is different then you just have to replace test1 by your script name! :)

now it time to run it!!

you have two ways to run it :-

1>     ./test1
2>     bash test1

then it will run your script :)
" | pv -qL 1000 | lolcat
play assets/chapter_1/ch_1pr_4.mp3 > /dev/null 2>&1
echo -e "
result:-
hello world
              <----there is a gap because be have used a blank echo in our script
hello world
" | pv -qL 1000 | lolcat
play assets/chapter_1/ch_1pr_5.mp3 > /dev/null 2>&1
__ENTER__
}

__chapter2__() {
echo -e "      ${B4} ${S2}CHAPTER:- 2 ${R0} ${R1}"
echo
echo -e "
    In the previous chapter we have leant how to make a simple bash script.
      Now its time to learn some more basic commands or syntaxes to use in our
      script to make it awesome :)!
" | pv -qL 1000 | lolcat
play assets/chapter_2/ch_2pr_1.mp3 > /dev/null 2>&1
__ENTER__
echo -e "
  Quick note: Anything encased in [ ] means that it’s optional.
              Some commands can be used without options or specifying files.

 ls — List directory contents

	ls is probably the most common command.
	A lot of times, you’ll be working in a directory
	and you’ll need to know what files are located there.
	The ls command allows you to quickly view all files
	within the specified directory.

Syntax: ls [option(s)] [file(s)]

Common options: -a, -l
" | pv -qL 1000 | lolcat
play assets/chapter_2/ch_2pr_2.mp3 > /dev/null 2>&1
__ENTER__
echo -e "

 echo — Prints text to the terminal window

       echo prints text to the terminal window and is
       typically used in shell scripts and batch files
       to output status text to the screen or a computer file.
       Echo is also particularly useful for showing the values of
       environmental variables, which tell the shell how to behave
       as a user works at the command line or in scripts.

Syntax: echo [option(s)] [string(s)]

Common options: -e, -n
" | pv -qL 1000 | lolcat
play assets/chapter_2/ch_2pr_3.mp3 > /dev/null 2>&1
__ENTER__
echo -e "
 touch — Creates a file

       touch is going to be the easiest way to create new files,
       but it can also be used to change timestamps on files and/or directories.
       You can create as many files as you want in a single command without worrying
       about overwriting files with the same name.

Syntax: touch [option(s)] file_name(s)

Common options: -a, -m, -r, -d

#To create multiple files:-

example:-
    touch test1 test2 test3 test4
result :- it will create all files that you supposed
to be created. i.e test1, test2, test3, test4

" | pv -qL 1000 | lolcat
play assets/chapter_2/ch_2pr_4.mp3 > /dev/null 2>&1
__ENTER__
echo -e "
 mkdir — Create a directory

       mkdir is a useful command you can use to create directories.
       Any number of directories can be created simultaneously which
       can greatly speed up the process.

Syntax: mkdir [option(s)] directory_name(s)

Common options: -m, -p, -v

#To create directories under directry

example:-
    mkdir -p test/test1/test2/test3
result :- it has created a directory named test3 inside
test2 which is inside test1 which is also inside the test directory
" | pv -qL 1000 | lolcat
play assets/chapter_2/ch_2pr_5.mp3 > /dev/null 2>&1
__ENTER__
echo -e "
 grep — search

       grep is used to search text for patterns specified by the user.
       It is one of the most useful and powerful commands. There are
       often scenarios where you’ll be tasked to find a particular string
       or pattern within a file, but you don’t know where to start looking,
       that is where grep is extremely useful.

Syntax: grep [option(s)] pattern [file(s)]

Common options: -i, -c, -n , -o
example:-
    uname -o | grep 'Android'
result:- Android   #for android users
result:-           #for other users its vacant or we can say null.

" | pv -qL 1000 | lolcat
play assets/chapter_2/ch_2pr_6.mp3 > /dev/null 2>&1
__ENTER__
}

__chapter3__() {
echo -e "      ${B4} ${S2}CHAPTER:- 3 ${R0} ${R1}"
echo
echo -e "
      ${S6}In this chapter we will learn our next basic command. So let's start!!${R0}
" | pv -qL 1000
play assets/chapter_3/ch_3pr_1.mp3 > /dev/null 2>&1
__ENTER__
echo -e "
 man — Print manual or get help for a command

       The man command is your manual and is very useful when you
       need to figure out what a command does. For example, if you
       didn’t know what the command rmdir does, you could use the
       man command to find that out.

Syntax: man [option(s)] keyword(s)

Common options: -w, -f, -b
" | pv -qL 1000 | lolcat
play assets/chapter_3/ch_3pr_2.mp3 > /dev/null 2>&1
__ENTER__
echo -e "
 cd — Change directory

      cd will change the directory you’re in so that you can get
      info, manipulate, read, etc. the different files and
      directories in your system.

Syntax: cd directory
" | pv -qL 1000 | lolcat
play assets/chapter_3/ch_3pr_3.mp3 > /dev/null 2>&1
__ENTER__
echo -e "
 pwd — Print working directory

       pwd is used to print the current directory you’re in.
       As an example, if you have multiple terminals going and
       you need to remember the exact directory you’re working
       within, then pwd will tell you.

Syntax: pwd
  example :- pwd       #in home directory of termux

result:- /data/data/com.termux/files/home

" | pv -qL 1000 | lolcat
play assets/chapter_3/ch_3pr_4.mp3 > /dev/null 2>&1
__ENTER__
echo -e "
 mv — Move or rename directory

      mv is used to move or rename directories. Without
      this command, you would have to individually rename
      each file which is tedious. mv allows you to do batch
      file renaming which can save you loads of time.

Syntax: mv [option(s)] argument(s)

Common options: -i, -b, -v

example:- to move file from curren directory to home directory

      mv -v test \$HOME  #\$HOME is path of home directory

example:- to rename a file

      mv test test1

" | pv -qL 1000 | lolcat
play assets/chapter_3/ch_3pr_5.mp3 > /dev/null 2>&1
__ENTER__
echo -e "
 rmdir — Remove directory

         rmdir will remove empty directories. This can help clean
         up space on your computer and keep files and folders organized.
         It’s important to note that there are two ways to remove
         directories: rm and rmdir.
         The distinction between the two is that rmdir will only
         delete empty directories, whereas rm will remove directories and
         files regardless if they contain data or not.

Syntax: rmdir [option(s)] directory_names
     or rm    [option(s)] directory or file name
Common options: -p, -f, -rf
example:- rmdir test   #it will delete test directory if it is empty
          rm -rf test  #it will forcely delete the directory or
                        file whether it is empty or not
" | pv -qL 1000 | lolcat
play assets/chapter_3/ch_3pr_6.mp3 > /dev/null 2>&1
__ENTER__
}
if [[ ${comand} == 'startlearning -2' ]]; then
__chapter2__
__chapter3__
elif [[ ${comand} == 'startlearning -3' ]]; then
__chapter3__

elif [[ ${comand} == 'startlearning -u' || ${comand} == 'startlearning --update' ]]; then
git pull
exit 1
elif [[ ${comand} == 'startlearning -h' || ${comand} == 'startlearning --help' ]]; then
printf "        \e[1;37m /\ .__    ._ _  _ .__|_ _._|_o _ ._  __ |_  _ |._  ._ _  _ ._     _\e[0m\n"
printf "        \e[1;33m/--\|(_||_|| | |(/_| ||_(_| |_|(_)| |    | |(/_||_) | | |(/_| ||_|(/_\e[0m\n"
printf "        \e[1;31m      _|                                        |\e[0m\n"

echo
echo -e "
${S5}<${S1}=========${S2}ARGUMENTS${S1}=======================${S2}USAGE${S1}=====================================${S5}>${R0}

       ${S6} -h ${S7}OR ${S6}--help               ${S4}To show this argumentation help menue${R0}

       ${S6} -u ${S7}OR ${S6}--update             ${S4}To update ! :)${R0}

       ${S6} -c ${S7}OR ${S6}--content            ${S4}To show the list of chapters in this program!${R0}
${S5}<${S1}----${S2}x${S1}----${S5}>${R0}

${S7}IF you want to open any particular chapter and continue from there then do:-${R0}

  ${S2} ./startlearning -chapeter_number${R0}

${S6}example:-${R0}

${S2}  ./startlearning -3${R0}
${S4}This will start from chapter 3 and continue${R0}

${S2}>>> ${S6}To run this program just run${R0} ${B5} './startlearning' ${R1}

${S5}<${S1}----${S2}x${S1}----${S5}>${R0}


${S3}To exit program just do ${S3}${B7} ctrl + c ${R1}

${S5}<${S1}----${S2}x${S1}----${S5}>${R0}
"
elif [[ ${comand} == 'startlearning -c' || ${comand} == 'startlearning --content' || ${comand} == 'startlearning --chapter' || ${comand} == 'startlearning --list' ]]; then
echo -e "

${B4}${T2}SL. NO${R0}${R1}               ${B4}${T2} Chapter Name and discription.${R0}${R1}

${S6}1.                    Introduction to bash scripting${R0}
                       ${S3} *definition of bash${R0}
                       ${S3} *Introduction to printing commands${R0}
                       ${S3} *Shebang (#!)${R0}
                       ${S3} *how to give exicution permission to any script${R0}
                       ${S3} *how to run a bash script${R0}

${S6}2.                    Introduction to basic commands${R0}
                       ${S3} *ls    -List directory contents${R0}
                       ${S3} *echo  -printing command${R0}
                       ${S3} *touch -file creating command${R0}
                       ${S3} *mkdir -directory creating command${R0}
                       ${S3} *grep  -search command${R0}

${S6}3.                    Basic commands part -2
                       ${S3} *man — Print manual or get help for a command${R0}
                       ${S3} *cd — Change directory${R0}
                       ${S3} *pwd — Print working directory${R0}
                       ${S3} *mv — Move or rename directory${R0}
                       ${S3} *rmdir — Remove directory${R0}

${B3}${S5} THIS PROGRAM IS UNDER HEAVY DEVELOPMENT SO PLEASE HAVE PATIENCE! OTHER CHAPTERS WILL BE ADDED VERY SOON !${R0}${R1}

"
else
__chapter1__
__chapter2__
__chapter3__
fi

